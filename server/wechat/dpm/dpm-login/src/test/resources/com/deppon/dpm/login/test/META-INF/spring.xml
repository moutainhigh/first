<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/jee 
			http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	default-autowire="byName" >
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
   		<!--  使用locations属性定义多个配置文件 -->
        <property name="locations">
             <list>
                 <value>classpath:config.properties</value>
             </list>
    	</property>
    </bean>
	
	<bean id="feedbackService" class="com.deppon.dpm.login.server.service.FeedbackService">
		<property name="feedbackDao" ref="feedbackDao" />
		<property name="normalQuestionDao" ref="normalQuestionDao" />
		<property name="photoAddressService" ref="photoAddressService" />
	</bean>
	<bean id="feedbackDao" class="com.deppon.dpm.tongxunlu.server.dao.impl.FeedbackDao">
		<property name="jdbcTemplate" ref="jdbcTemplate"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	
	<bean id="normalQuestionDao"
		class="com.deppon.dpm.module.announce.server.dao.impl.NormalQuestionDao" />
	<bean id="photoAddressService"
		class="com.deppon.dpm.module.common.server.service.impl.PhotoAddressService">
		<property name="headPortraitAddress" value="/dpmfile/headPhoto"></property>
		<property name="taskPhotoAddress" value="/dpmfile"></property>
		<property name="feedBackAddress" value="/dpmfile"></property>
		<property name="welcomeAddress" value="/dpmfile/welcome" />
		<property name="serverHostPort" value="${serverHostPort}"/>
	</bean>
	
	<bean id="loginService" class="com.deppon.dpm.login.server.service.LoginService">
		<property name="employeeDao" ref="employeeDao"></property>
		<property name="roleResourceDao" ref="roleResourceDao"></property>
		<property name="organizationDao" ref="orgDao"></property>
		<property name="jdbcTemplate" ref="jdbcTemplate" />
		<property name="resourceService" ref="resourceService" />
		<property name="personlyImageService" ref="personlyImageService"></property>
		<property name="iApplyStoreService" ref="iApplyStoreService"></property>
		<property name="informationService" ref="informationService"></property>
	</bean>
	
	<bean id="resourceDao" class="com.deppon.dpm.uums.server.dao.impl.ResourceDao" scope="prototype" >
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	<bean id="resourceService" class="com.deppon.dpm.uums.server.service.impl.ResourceService" scope="prototype" >
	    <property name="resourceDao" ref="resourceDao"></property>
	</bean>
	
	<bean id="casLoginService" class="com.deppon.dpm.login.server.service.CasLoginService">
		<property name="casLoginUrl" value="${cas_login_url}"></property>
		<property name="casUrl" value="${cas_url}"></property>
		<property name="mainPageUrl" value="${main_page_url}"></property>
		<property name="roleUrl" value="${roleurl}"></property>
	</bean>
	
	<bean id="employeeDao" class="com.deppon.dpm.tongxunlu.server.dao.impl.EmployeeDao">
		<property name="template" ref="jdbcTemplate" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	<bean id="roleResourceDao" class="com.deppon.dpm.uums.server.dao.impl.RoleResourceDao"  scope="prototype" />
	<bean id="orgDao"
		class="com.deppon.dpm.tongxunlu.server.dao.impl.OrganizationDao">
		<property name="template" ref="jdbcTemplate" />
	</bean>
	<bean id="personlyImageService"
		class="com.deppon.dpm.tongxunlu.server.service.impl.PersonlyImageService">
		<property name="personlyImageDao" ref="personlyImageDao" />
		<property name="photoAddressService" ref="photoAddressService" />
		<property name="webUrl" value="http://192.168.67.47:8080/dpm"></property>
	</bean>
	<bean id="personlyImageDao"
		class="com.deppon.dpm.tongxunlu.server.dao.impl.PersonlyImageDao" />
	<bean id="iApplyStoreService"
		class="com.deppon.dpm.module.management.server.service.impl.ApplyStoreService">
		<property name="iApplyStoreDao" ref="iApplyStoreDao" />
		<property name="roleUrl" value="${roleurl}" />
	</bean>
	<bean id="iApplyStoreDao"
		class="com.deppon.dpm.module.management.server.dao.impl.ApplyStoreServiceDao" />
	<bean id="informationService"
		class="com.deppon.dpm.module.management.server.service.impl.InformationService">
		<property name="uUMSRoleService" ref="uUMSRoleService"/>
		<property name="informationDao" ref="informationDao" />
		<property name="roleUrl" value="${roleurl}" />
	</bean>
	<bean id="uUMSRoleService" class="com.deppon.dpm.module.common.server.service.impl.UUMSRoleServiceImpl">
		<property name="roleUrl" value="${roleurl}"/>
	</bean>
	<bean id="informationDao"
		class="com.deppon.dpm.module.management.server.dao.impl.InformationDao">
	</bean>
	
	<!-- JDBC BEGIN -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://192.168.68.118:3306/app" />
		<property name="username" value="mysql1" />
		<property name="password" value="mysql1" />
	</bean>

	<!-- 数据连接管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 事务注解支持 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	<!-- myBatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- <property name="configLocation" value="com/deppon/dpm/module/announce/test/META-INF/ibatis.xml" /> -->
		<property name="mapperLocations">
			<list>
				<value>classpath*:com/deppon/**/META-INF/ibatis/*.xml</value>
				<!-- <value>classpath*:com/deppon/dpm/login/test/META-INF/ibatis/employee.xml</value> -->
			</list>
		</property>
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- JDBC END -->

	<!-- 定义一个Ehcache -->
	<!-- <bean id="dpmCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		<property name="cacheName" value="dpmEhcache" />
		<property name="cacheManager" ref="dpmEhcacheManager" />
	</bean> -->
	
	<!-- <bean id="dpmEhcacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		指定配置文件的位置
		<property name="configLocation" value="/ehcache.xml" />
	</bean> -->

	<!-- <bean class="com.deppon.dpm.module.common.server.util.DpmCacheManager">
		<property name="cache" ref="dpmCache" />
		<property name="redisCacheStorage" ref="redisCacheStorage" />
	</bean>
	redis缓存
	<bean id="redisCacheStorage"
		class="com.deppon.foss.framework.cache.storage.RedisCacheStorage">
		<property name="client" ref="client" />
	</bean>
	YB增加DPAP数据缓存
	<bean id="storage"
		class="com.deppon.dpm.login.server.cache.DefaultLocalCacheStorage">
	</bean>
	YB增加DPAP数据缓存
	<bean id="client" class="com.deppon.foss.framework.cache.redis.RedisClient">
		<property name="host1" value="${redis.host1}"></property>
		<property name="port1" value="${redis.port1}"></property>
		<property name="poolConfig" ref="poolConfig"></property>
	</bean>
	YB增加DPAP数据缓存池
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxActive" value="${redis.pool.maxActive}"></property>
		<property name="maxIdle" value="${redis.pool.maxIdle}"></property>
		<property name="maxWait" value="${redis.pool.maxWait}"></property>
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}"></property>
		<property name="testOnReturn" value="${redis.pool.testOnReturn}"></property>
	</bean> -->


</beans>
